const Category = require('../../models/main/category.model.js');
var multer = require('multer');

var fs = require('file-system');

const mongoose = require("mongoose");


const storage = multer.diskStorage({
  destination: function(req, file, cb) {
    cb(null, './uploads/');
  },
  filename: function(req, file, cb) {
    cb(null, new Date().toISOString() + file.originalname);
  }
});

const fileFilter = (req, file, cb) => {
  // reject a file
  if (file.mimetype === 'image/jpeg' || file.mimetype === 'image/png') {
    cb(null, true);
  } else {
    cb(null, false);
  }
};

const upload = multer({
  storage: storage,
  limits: {
    fileSize: 1024 * 1024 * 5
  },
  fileFilter: fileFilter
});


//Create new Category
exports.create = (req, res) => {
    // Request validation
    if(!req.body) {
        
        return res.status(400).send({
            message: "category content can not be empty"
        });
    }
       // var fs = require('fs')
        var now = new Date();
        var dir = "./storage/" + now.getFullYear().toString();
        var dir1 = dir +"/" + now.getMonth().toString();
        var dir2 = dir1 + "/" + now.getDate().toString();
        if (!fs.existsSync(dir)){
            fs.mkdirSync(dir);
            if (!fs.existsSync(dir1)){
                fs.mkdirSync(dir1);
                if (!fs.existsSync(dir2)){
                    fs.mkdirSync(dir2);
                    
                }
            }
            
        }  
        var oldPath = req.body.file_path;
        // var filename = console.log(oldPath.substring(13));
       /* var filename = */
        var newPath = './storage/uploads/2019/4/19/' + oldPath.substring(13)
        console.log(newPath);
        fs.rename(oldPath, newPath, function (err) {
        if (err) throw err
        console.log('Successfully  moved!')
        })

    // Create a Category
    const category = new Category({
        name: req.body.name || "No category name", 
        description: req.body.description || "No category description",
        file_path: newPath || "no file path"
      
    });
    
    // Save Category in the database
    category.save()
    .then(data => {
        console.log(data);
        res.send(data);
    }).catch(err => {
        res.status(500).send({
            message: err.message || "Something wrong while creating the category."
        });
    }); 

   
        
     
      };
   


// Retrieve all Category from the database.
exports.findAll = (req, res) => {
    Category.find(req.body.where)
    Category.find({ categoryId: "5cbd706ff5f1192a5c43d00a",status:1})
    .then(categories => {
        return res.status(200).json({
            status: true,
            status_code: 200,
            message: "OK",                                           
            categories: categories
        });
    }).catch(err => {
        res.status(500).send({
            message: err.message || "Something wrong while retrieving category."
        });
    });
};

// Find a single Category with a categoryId
exports.findOne = (req, res) => {
    Category.findById(req.params.categoryId)
    .then(categories => {
        if(!categories) {
            return res.status(404).send({
                message: "category not found with id " + req.params.categoryId
            });            
        }
        res.send(categories);
    }).catch(err => {
        if(err.kind === 'ObjectId') {
            return res.status(404).send({
                message: "category not found with id " + req.params.categoryId
            });                
        }
        return res.status(500).send({
            message: "Something wrong retrieving category with id " + req.params.categoryId
        });
    });
};

// Update a Category
exports.update = (req, res) => {
    // Validate Request
    if(!req.body) {
        return res.status(400).send({
            message: "category content can not be empty"
        });
    }

    // Find and update Category with the request body
    Category.findByIdAndUpdate(req.body.where, {
        name: req.body.set.name || "No category name", 
        description: req.body.description || "no category description"
       
    }, {new: true})
    .then(categories => {
        if(!categories) {
            return res.status(404).send({
                message: "category not found with id " + req.params.categoryId
            });
        }
        res.send(categories);
    }).catch(err => {
        if(err.kind === 'ObjectId') {
            return res.status(404).send({
                message: "category not found with id " + req.params.categoryId
            });                
        }
        return res.status(500).send({
            message: "Something wrong updating note with id " + req.params.categoryId
        });
    });
};

// Delete a category with the specified categoryId in the request
exports.delete = (req, res) => {
    Category.findByIdAndRemove(req.params.categoryId)
    .then(categories => {
        if(!categories) {
            return res.status(404).send({
                message: "category not found with id " + req.params.categoryId
            });
        }
        res.send({message: "category deleted successfully!"});
    }).catch(err => {
        if(err.kind === 'ObjectId' || err.name === 'NotFound') {
            return res.status(404).send({
                message: "category not found with id " + req.params.categoryId
            });                
        }
        return res.status(500).send({
            message: "Could not delete category with id " + req.params.categoryId
        });
    });
};

exports.getProductsWithCategories = (req, res) => {
    Category.collection.aggregate([
        {
            $lookup:
            {
                from: "products",
                localField: "cat_id", //autoincrement id
                foreignField : "category_id",
                as: "products"
                
            }
        }
    ]).toArray(function(err, docs){
        console.log(docs);
        //res.json(docs);
        res.status(200).json({
            status: true,
            status_code: 200,
            message: "OK",                                           
            categories: docs
        });

     });
 };

